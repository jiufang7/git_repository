class Solution:
    def numDecodings(self, s: str):
        cnt = [1,1] + [0] * len(s)
        s = "99" + s #添加虚拟头部，以便不用对头部做特殊处理
        for i in range(2, len(s)):
            if( 10 <= int(s[i-1:i+1]) <= 26): #s[i]可与s[i-1]组合
                cnt[i] += cnt[i-2]
            if(s[i] != '0'): #s[i]可单独解码
                cnt[i] += cnt[i-1]
        return cnt[-1]

# 2020.10.27
"""
    上楼梯的复杂版？
    如果连续的两位数符合条件，就相当于一个上楼梯的题目，可以有两种选法：
        1.一位数决定一个字母
        2.两位数决定一个字母
        就相当于dp(i) = dp[i-1] + dp[i-2];
    如果不符合条件，又有两种情况
        1.当前数字是0：
            不好意思，这阶楼梯不能单独走，
            dp[i] = dp[i-2]
        2.当前数字不是0
            不好意思，这阶楼梯太宽，走两步容易扯着步子，只能一个一个走
            dp[i] = dp[i-1];
"""